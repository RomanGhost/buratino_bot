package bot

import (
	"context"
	"fmt"
	"log"

	"github.com/RomanGhost/buratino_bot.git/internal/account/service"
	"github.com/RomanGhost/buratino_bot.git/internal/telegram/data"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type UserHandler struct {
	userService *service.UserService
}

func NewUserHandler(userService *service.UserService) *UserHandler {
	return &UserHandler{
		userService: userService,
	}
}

// first message
func (h *UserHandler) RegisterUser(ctx context.Context, b *bot.Bot, update *models.Update) {
	telegramUser := update.Message.From
	log.Printf("[INFO] Regist user: %v, ID: %v", telegramUser.Username, telegramUser.ID)

	_, err := h.userService.RegisterUser(telegramUser.ID, telegramUser.Username)
	if err != nil {
		log.Printf("[WARN] user register error: %v", err)
	}

	inlineKeyboard := data.CreateKeyboard(
		[]models.InlineKeyboardButton{data.CreateKeyButton()},
		[]models.InlineKeyboardButton{data.AboutOutlineButton(), data.KnowProjectButton()},
	)

	_, sendMessageError := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(
			"üé≠ *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, %v*\\!\n\n–Ø \\- _–ë—É—Ä–∞—Ç–∏–Ω–æ_, –Ω–µ –ø—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–∞–ª—å—á–∏—à–∫–∞, –∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –≤–æ–ª—à–µ–±–Ω—ã—Ö –∫–ª—é—á–µ–π –æ—Ç –ø–æ—Ç–∞–π–Ω—ã—Ö –¥–≤–µ—Ä–µ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\\! üåç‚ú®\n\n–í —ç—Ç–æ–º —Å–∫–∞–∑–æ—á–Ω–æ–º —á–∞—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å *–≤–æ–ª—à–µ–±–Ω—ã–π VPN\\-–∫–ª—é—á*, –∫–æ—Ç–æ—Ä—ã–π —É–∫—Ä–æ–µ—Ç —Ç–µ–±—è –æ—Ç –∑–ª—ã—Ö –ö–∞—Ä–∞–±–∞—Å–æ–≤ –∏ –∑–ª–æ–±–Ω—ã—Ö –ë—Ä–∞–Ω–¥–º–µ–π—Å—Ç–µ—Ä–æ–≤ üîí\n\nüîë *–ù–∞–∂–º–∏ –Ω–∞ –≤–æ–ª—à–µ–±–Ω—É—é –∫–Ω–æ–ø–∫—É*, –∏ —è –ø–æ–¥–∞—Ä—é —Ç–µ–±–µ –∫–ª—é—á–∏–∫‚Ä¶ –Ω–æ –ø–æ–º–Ω–∏:\n\\- –æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏—à—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚è≥\n\\- –¥–æ–±—Ä–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å –∫—É–ª–∞–∫–∞–º–∏‚Ä¶ –Ω–æ –ø–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º\\! üõ°Ô∏è\n\nüßô‚Äç‚ôÇÔ∏è –ü–æ–µ—Ö–∞–ª–∏ –≤ —Å—Ç—Ä–∞–Ω—É —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\\!",
			bot.EscapeMarkdown(telegramUser.Username),
		),
		ReplyMarkup: inlineKeyboard,
		ParseMode:   models.ParseModeMarkdown,
	})
	if sendMessageError != nil {
		log.Printf("[WARN] Error send message %v", err)
	}
}
