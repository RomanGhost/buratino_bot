package handler

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/RomanGhost/buratino_bot.git/internal/handler/outline"
	"github.com/RomanGhost/buratino_bot.git/internal/service"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type KeyHandler struct {
	outline    *outline.OutlineClient
	keyService *service.KeyService
}

func NewKeyHandler(outline *outline.OutlineClient, keyService *service.KeyService) *KeyHandler {
	return &KeyHandler{outline: outline, keyService: keyService}
}

func (h *KeyHandler) CreateKeyInline(ctx context.Context, b *bot.Bot, update *models.Update) {
	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})

	key, err := h.outline.CreateAccessKey()
	if err != nil {
		log.Printf("[WARN] create outline key: %v\n", err)
		missKeyError(ctx, b, update.CallbackQuery.Message.Message.Chat.ID)
		return
	}

	telegramUser := update.CallbackQuery.From
	key.Name = fmt.Sprintf("%v_%v", telegramUser.ID, time.Now().UTC().Unix())
	err = h.outline.RenameAccessKey(key.ID, key.Name)
	if err != nil {
		log.Printf("[WARN] rename outline key: %v\n", err)
		missKeyError(ctx, b, update.CallbackQuery.Message.Message.Chat.ID)
		return
	}
	//
	connectionKey := key.AccessURL + "&prefix=POST%20"

	_, err = h.keyService.CreateKey(telegramUser.ID, 1, connectionKey)
	if err != nil {
		log.Printf("[WARN] write key in db: %v\n", err)
		return
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.CallbackQuery.Message.Message.Chat.ID,
		Text: fmt.Sprintf(
			"üîë *–í–æ—Ç –º–æ–π –≤–æ–ª—à–µ–±–Ω—ã–π –∫–ª—é—á–∏–∫* \\- –¥–µ—Ä–∂–∏, –Ω–µ –ø–æ—Ç–µ—Ä—è–π\\! ü™Ñ\n\n`%s`\n\n_–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ‚Äî –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è —Å–∞–º —Å–æ–±–æ–π\\.\\.\\._ ‚ú®",
			bot.EscapeMarkdown(connectionKey),
		),
		ParseMode: "MarkdownV2",
	})

	if err != nil {
		log.Printf("[WARN] Error send key message %v", err)
	}

}

func CreateKeyInlineShutdown(ctx context.Context, b *bot.Bot, mes models.MaybeInaccessibleMessage, data []byte) {
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: mes.Message.Chat.ID,
		Text: `üîß *–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ* üîÆ

		–¢—Å—Å—Å\.\.\. *–ë—É—Ä–∞—Ç–∏–Ω–æ –∫–æ–ª–¥—É–µ—Ç –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ —á—É–¥–µ—Å–∞–º–∏* üßô‚Äç‚ôÇÔ∏è‚ú®  
		–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–µ—á—Ç–æ –≤–æ–ª—à–µ–±–Ω–æ–µ, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –µ—â—ë –ø—Ä–æ—â–µ –∏ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–∞–π–Ω—ã–µ –∫–ª—é—á–∏–∫–∏ –æ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ üåçüîë

		*–ü–æ—Ç–µ—Ä–ø–∏ –Ω–µ–º–Ω–æ–≥–æ, –¥–æ–±—Ä—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫* \- –º–∞–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏\! ‚è≥`,
		ParseMode: models.ParseModeMarkdown,
	})

	if err != nil {
		log.Printf("[WARN] Error send key message %v", err)
	}
}

func missKeyError(ctx context.Context, b *bot.Bot, chatId int64) {
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatId,
		Text: `üèÉ‚Äç‚ôÇÔ∏èüí® –ü–æ–∫–∞ —è –∫ —Ç–µ–±–µ –±–µ–∂–∞–ª, *–∫–ª—é—á–∏–∫ –∫—É–¥–∞\-—Ç–æ –≤—ã—Å–∫–æ–ª—å–∑–Ω—É–ª*\.\.\. üîëüò±  
–ù–æ –Ω–µ –±–µ–¥–∞\! *–ü–æ–∏—Å–∫–∏ —É–∂–µ –≤–µ–¥—É—Ç—Å—è* \- —è –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –≤—Å–µ—Ö —Å–≤–µ—Ä—á–∫–æ–≤, –ø—Å–æ–≤ –∏ –¥–∞–∂–µ –î—É—Ä–µ–º–∞—Ä–∞ —Å –µ–≥–æ –ª—è–≥—É—à–∫–∞–º–∏ üïµÔ∏è‚Äç‚ôÇÔ∏èüê∏

*–ß—É—Ç–æ–∫ —Ç–µ—Ä–ø–µ–Ω–∏—è, –¥—Ä—É–≥ –º–æ–π* \- —Å–∫–æ—Ä–æ –≤—Å—ë –Ω–∞–π–¥—ë—Ç—Å—è, –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è ‚ú®`,
		ParseMode: models.ParseModeMarkdown,
	})
	if err != nil {
		log.Printf("[WARN] Error send info error message %v", err)
	}
}
